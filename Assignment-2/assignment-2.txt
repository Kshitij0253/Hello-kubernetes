Assignment 2: Exposing NGINX Deployment Using NodePort Service

---------------------------------------------
âœ… Task 1: Use the Existing NGINX Deployment
---------------------------------------------
- Reused the previous deployment: `nginx-deployment`
- It is already running 2 replicas of the NGINX web server.

---------------------------------------------
ðŸ“˜ What is a Kubernetes Service? Why Do We Need It?
---------------------------------------------

In Kubernetes, a **Service** is an abstraction that defines a logical set of Pods and a policy by which to access them.

Services are needed because:
- Pods are **ephemeral** â€“ they can be created or destroyed at any time.
- Each Pod gets a unique IP address that changes if the Pod is recreated.
- Services provide a **stable endpoint** (DNS name + port) to communicate with these Pods.

### ðŸ§© Types of Kubernetes Services:
1. **ClusterIP** (default): Accessible only inside the cluster.
2. **NodePort**: Exposes the service on a static port on each node.
3. **LoadBalancer**: Integrates with cloud providers to provision an external load balancer.
4. **ExternalName**: Maps a service to an external DNS name.

In this assignment, we used **NodePort**, which:
- Makes the application accessible **outside the cluster** via `<NodeIP>:<NodePort>`.
- Useful for testing and development when LoadBalancer isn't required.

---------------------------------------------
âœ… Task 2: Create a NodePort Service
---------------------------------------------

1. Created a service YAML file named: nginx-nodeport-service.yaml

Contents of nginx-nodeport-service.yaml:
---------------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: nginx-nodeport-service
spec:
  type: NodePort
  selector:
    app: nginx
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30080
---------------------------------------------------------

2. Applied the service using:
   kubectl apply -f nginx-nodeport-service.yaml

3. Verified the service is running:
   kubectl get svc

Expected Output:
---------------------------------------------------------
NAME                     TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE
nginx-nodeport-service  NodePort   10.x.x.x          <none>        80:30080/TCP   x min
---------------------------------------------------------

4. Verified service connectivity:
   kubectl describe svc nginx-nodeport-service

   - Confirmed selector matched: `app=nginx`
   - Endpoints showed valid pod IPs with port 80

---------------------------------------------
âœ… Task 3: Check Service in Browser
---------------------------------------------

1. Identified public IPs of EC2 worker nodes:
   kubectl get nodes -o wide

   Example public IPs:
   - 3.109.153.52
   - 13.203.79.212

2. Opened browser and visited:
   http://<public-ip>:30080

   Example:
   http://13.203.79.212:30080

3. NGINX welcome page appeared:
   "Welcome to nginx!"

---------------------------------------------
âœ… Notes:
---------------------------------------------

- Port 30080 was allowed in the EC2 Security Group:
  - Type: Custom TCP
  - Port Range: 30080
  - Source: 0.0.0.0/0

- In case of issues, tried other node public IPs.

- Optional: Could use a LoadBalancer service for production setup.
